// Generated by gencpp from file rplidar_ros/Control.msg
// DO NOT EDIT!


#ifndef RPLIDAR_ROS_MESSAGE_CONTROL_H
#define RPLIDAR_ROS_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rplidar_ros
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : velocity(0.0)
    , steer_angle(0.0)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , steer_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;





  typedef boost::shared_ptr< ::rplidar_ros::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rplidar_ros::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::rplidar_ros::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::rplidar_ros::Control > ControlPtr;
typedef boost::shared_ptr< ::rplidar_ros::Control const> ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rplidar_ros::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rplidar_ros::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rplidar_ros::Control_<ContainerAllocator1> & lhs, const ::rplidar_ros::Control_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.steer_angle == rhs.steer_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rplidar_ros::Control_<ContainerAllocator1> & lhs, const ::rplidar_ros::Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rplidar_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rplidar_ros::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rplidar_ros::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rplidar_ros::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rplidar_ros::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rplidar_ros::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rplidar_ros::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rplidar_ros::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b78d7aa85d0de2901107ab6e97fb5393";
  }

  static const char* value(const ::rplidar_ros::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb78d7aa85d0de290ULL;
  static const uint64_t static_value2 = 0x1107ab6e97fb5393ULL;
};

template<class ContainerAllocator>
struct DataType< ::rplidar_ros::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rplidar_ros/Control";
  }

  static const char* value(const ::rplidar_ros::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rplidar_ros::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velocity\n"
"float32 steer_angle\n"
;
  }

  static const char* value(const ::rplidar_ros::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rplidar_ros::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.steer_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rplidar_ros::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rplidar_ros::Control_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RPLIDAR_ROS_MESSAGE_CONTROL_H
